{
  "version": 3,
  "sources": ["../../src/CountingSet.ts", "../../src/Container.ts", "../../src/Singleton.ts"],
  "sourcesContent": ["export class CountingSet<T> {\n  private readonly _map = new Map<T, number>()\n  private readonly _set = new Set<T>()\n\n  add(value: T): this {\n    const count = this._map.get(value) || 0\n    this._map.set(value, count + 1)\n    this._set.add(value)\n    return this\n  }\n\n  delete(value: T): boolean {\n    if (this._map.has(value)) {\n      const count = this._map.get(value)!\n      if (count > 1) {\n        this._map.set(value, count - 1)\n      } else {\n        this._map.delete(value)\n        this._set.delete(value)\n      }\n      return true\n    }\n    return false\n  }\n\n  has(value: T): boolean {\n    return this._set.has(value)\n  }\n\n  count(value: T): number {\n    return this._map.get(value) || 0\n  }\n\n  clear(): void {\n    this._map.clear()\n    this._set.clear()\n  }\n\n  get size(): number {\n    return this._set.size\n  }\n\n  [Symbol.iterator](): Iterator<T> {\n    return this._set[Symbol.iterator]()\n  }\n\n  forEach(\n    callbackfn: (value: T, value2: T, set: Set<T>) => void,\n    thisArg?: any\n  ): void {\n    this._set.forEach(callbackfn, thisArg)\n  }\n}\n", "import { CountingSet } from \"./CountingSet\"\n\nexport type Context = {\n  [key: string]: unknown\n}\n\nexport type Instance<TValue> = {\n  new (context: any, ...args: any[]): TValue\n}\n\ntype Flatten<T> = {} & { [P in keyof T]: T[P] }\n\ntype AppendContext<TExisting, TKey extends string, TValue> = Flatten<\n  TExisting & {\n    [P in TKey]: TValue\n  }\n>\n\ntype RegistrationOptions = {\n  transient?: boolean\n}\n\nexport class Container<TContext extends Context = {}> {\n  private _registry: Map<string, unknown> = new Map<string, unknown>()\n  private _resolvers: Map<string, (context: TContext) => unknown> = new Map<\n    string,\n    (context: TContext) => unknown\n  >()\n  private _cache: Map<(context: TContext) => unknown, unknown> = new Map()\n  private _transient: Set<string> = new Set<string>()\n  private _base: Record<string, unknown> = {}\n\n  private _rootContainer: Container | this\n  private _parentContainer: Container | this\n\n  constructor(rootContainer?: Container, _parentContainer?: Container) {\n    this._rootContainer = rootContainer ?? this\n    this._parentContainer = _parentContainer ?? this._rootContainer\n  }\n\n  get root() {\n    return this._rootContainer\n  }\n\n  get parent() {\n    return this._parentContainer\n  }\n\n  static new<T extends Context = {}>(): Container<T> {\n    return new Container<T>()\n  }\n\n  static build<T extends Context = {}>() {\n    return Container.new<T>()\n  }\n\n  base<TBase extends Context>(base: TBase): Container<TContext & TBase> {\n    this._base = base\n    return this as any\n  }\n\n  createContextProxy() {\n    const cache: Record<string, unknown> = {}\n    const resolving = new CountingSet<unknown>()\n\n    const handler = {\n      get: (target: TContext, key: string) => {\n        if (cache.hasOwnProperty(key)) return cache[key]\n        if (target.hasOwnProperty(key)) return target[key]\n\n        return resolve(key)\n      },\n      set: (_target: Context, key: string, value: unknown) => {\n        cache[key] = value\n        return true\n      },\n    }\n\n    const proxy = new Proxy({}, handler)\n\n    const resolve = <TValue>(key: keyof TContext) => {\n      if (this._base?.[key as string])\n        return this._base[key as string] as TValue\n\n      const resolver = this._resolvers.get(key as string)!\n\n      if (this._registry.has(key as string)) {\n        resolving.delete(resolver)\n        return this._registry.get(key as string) as unknown as TValue\n      }\n\n      if (resolving.count(resolver) > 1) {\n        resolving.delete(resolver)\n        return this._cache.get(resolver) as unknown as TValue\n      }\n\n      const value = resolver?.(\n        this._rootContainer.context() as unknown as TContext\n      ) as unknown as TValue\n\n      resolving.delete(resolver)\n\n      if (!this._transient.has(key as string)) {\n        this._registry.set(key as string, value)\n        this._parentContainer._registry.set(key as string, value)\n        this._cache.set(resolver, value)\n      }\n\n      return value\n    }\n\n    return proxy\n  }\n\n  context<\n    TWriteContext extends Context = TContext,\n    TOverride extends Context = {}\n  >(override: TOverride | {} = {}): Flatten<TWriteContext & TOverride> {\n    // Get all of the keys for the resolvers in this container\n    const keys = Array.from(this._resolvers.keys())\n\n    const proxy = this.createContextProxy()\n\n    const context = keys.reduce(\n      (acc, key) => {\n        Object.defineProperty(acc, key, {\n          get: () => {\n            return proxy[key as keyof typeof proxy]\n          },\n          enumerable: true,\n        })\n\n        return acc\n      },\n      { ...this._base } as Flatten<TWriteContext & TOverride>\n    )\n\n    return Object.assign(context, override)\n  }\n\n  // Add a subcontext to a property of this context\n  group<TNewKey extends string, TNewContext extends Context>(\n    key: TNewKey,\n    decorator: (container: Container<{}>) => Container<TNewContext>\n  ) {\n    // @ts-expect-error\n    // Create a new container for the group and set this container as the parent.\n    const groupContainer = decorator(new Container(this._rootContainer, this))\n\n    const groupContext = groupContainer.context()\n    this.register(key, () => groupContext)\n\n    const grouping = Array.from(groupContainer._resolvers.keys()).reduce(\n      (acc, key) => {\n        return {\n          ...acc,\n          get [key]() {\n            return groupContext[key]\n          },\n        }\n      },\n      {} as TNewContext\n    )\n\n    this._registry.set(key as string, grouping)\n\n    return this as Container<TContext & { [key in TNewKey]: TNewContext }>\n  }\n\n  singleton<TNewKey extends string, TValue>(\n    key: TNewKey,\n    ClassConstructor: Instance<TValue>,\n    ...args: any[]\n  ) {\n    return this.register(\n      key,\n      (context) => new ClassConstructor(context, ...args)\n    )\n  }\n\n  instance<TNewKey extends string, TValue>(\n    key: TNewKey,\n    ClassConstructor: Instance<TValue>,\n    ...args: any[]\n  ) {\n    return this.singleton(key, ClassConstructor, ...args)\n  }\n\n  register<TNewKey extends string, TValue>(\n    key: TNewKey,\n    resolver: (context: TContext) => TValue,\n    { transient }: RegistrationOptions = { transient: false }\n  ): Container<AppendContext<TContext, TNewKey, TValue>> {\n    if (transient) this._transient.add(key)\n    this._resolvers.set(key, resolver)\n    return this as any\n  }\n\n  unregister<TNewKey extends string>(\n    key: TNewKey\n  ): Container<Omit<TContext, TNewKey>> {\n    this._resolvers.delete(key)\n    this._registry.delete(key)\n    this._transient.delete(key)\n\n    return this as any\n  }\n\n  resolve<TValue>(key: keyof TContext): TValue {\n    const resolver = this._resolvers.get(key as string)\n    if (!resolver) throw new Error(`dependency ${String(key)} not registered`)\n    return resolver(this._rootContainer.context() as TContext) as TValue\n  }\n\n  middleware<TNewContext extends Context>(\n    middleware: (container: Container<TContext>) => Container<TNewContext>\n  ) {\n    return middleware(this)\n  }\n}\n", "import { Context } from \"./Container\"\n\ntype PopulatedSingleton<T> = T & { [key in keyof T]: T[key] }\n\n// Mixin to add context-based properties to a class\nexport function WithContextProperties<T extends Context>(\n  Base: any\n): new (context: T) => PopulatedSingleton<T> {\n  return class extends Base {\n    constructor(context: T) {\n      super(context)\n\n      for (const key in context) {\n        Object.defineProperty(this, key, {\n          get: function () {\n            return context[key]\n          },\n          enumerable: true,\n        })\n      }\n    }\n  } as new (context: T) => PopulatedSingleton<T>\n}\n\nexport class Singleton<TContext extends Context> {\n  protected _context: TContext\n\n  constructor(context: TContext) {\n    this._context = context\n  }\n}\n"],
  "mappings": "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",
  "names": ["key"]
}
